{
  "hash": "f897e5646a55e6e14cecae8064601be9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: A 5-year review of my retirement portfolio\nsubtitle: \"#2\"\nauthor: corey\ndate: 2025-08-17\ncategories:\n  - economics\n  - work\neditor_options: \n  markdown: \n    wrap: sentence\nexecute:\n  warning: false\n  cache: true\nfrom: markdown+emoji\ndraft: true\n---\n\nAs I mentioned in [my last post](../2025-07-20-holdings-performance/index.qmd), I'd like to incorporate the expenses of each ETF and simulate the absolute returns given sample investments:\nMy goal here is to compare the portfolio performance against investing the same amounts in `$VTI`.\n\n::: {.callout-note}\n# Pricing in expenses\n\nExpense ratios are priced into the net asset value of the fund daily.\nFor example, if one of my positions was \\$1,000 dollars and the expense ratio was 1%, effectively the position would be worth \\$990.\nIf the expense ratio were 0.01%, the position would be worth \\$999.\n\nI won't include taxes in this analysis since they are based on which accounts my investments reside in rather than the investments themselves.\nThe allocation of accounts is prior to investment decisions.\n:::\n\n\n# Tidy portfolios\n\nI'm tracking my portfolio in dataframes for familiarity, starting with the same table I used in my last post.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidyquant)\n\nbrokerage <- c(\"ESGE\", \"ESGU\", \"VTI\") |>\n  tq_get(from = \"2020-05-01\") |>\n  mutate(account = \"brokerage\")\n\nira <- c(\"VLXVX\", \"VTI\") |>\n  tq_get(from = \"2023-06-01\") |>\n  mutate(account = \"ira\")\n```\n:::\n\n\nTo separate our baseline from the rest, I'll add a column for `$VTI`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprices <- bind_rows(ira, brokerage) |>\n  mutate(scenario = if_else(symbol == \"VTI\", \"baseline\", \"actual\"))\n```\n:::\n\n\nWhat all is in this table?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(prices)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 4,544\nColumns: 9\n$ symbol   <chr> \"VTI\", \"VTI\", \"VTI\", \"VTI\", \"VTI\", \"VTI\", \"VTI\", \"VTI\", \"VTI\"…\n$ date     <date> 2020-05-01, 2020-05-04, 2020-05-05, 2020-05-06, 2020-05-07, …\n$ open     <dbl> 143.12, 140.67, 144.08, 144.61, 144.70, 146.45, 146.22, 148.0…\n$ high     <dbl> 143.60, 142.45, 145.34, 144.87, 145.76, 147.63, 148.21, 148.3…\n$ low      <dbl> 139.80, 139.91, 143.46, 142.70, 144.40, 145.88, 146.03, 144.2…\n$ close    <dbl> 141.81, 142.35, 143.67, 142.88, 144.75, 147.47, 147.49, 144.3…\n$ volume   <dbl> 4232500, 4741200, 3665900, 3927300, 3796300, 4248400, 4240900…\n$ adjusted <dbl> 131.2239, 131.7235, 132.9450, 132.2140, 133.9444, 136.4614, 1…\n$ account  <chr> \"baseline\", \"baseline\", \"baseline\", \"baseline\", \"baseline\", \"…\n```\n\n\n:::\n:::\n\n\nFrom this dataframe, we only need `symbol`, `date`, `adjusted`, `account`, and `scenario` so we can drop the rest.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselected_prices <- select(prices, symbol, date, adjusted, account, scenario)\n```\n:::\n\n\nTo this dataframe, we need to add the number of shares in each account that I would have purchased at the time I started investing.\nCalculating shares is a sraightforward division of the allocated amount on the day I purchased by the share price.\nI'll pretend I invested \\$1,000 in my taxable brokerage account in May 2020 and \\$10,000 in my Roth IRA in June 2022, when I moved to Cambridge.\nThis is more realistic than it might sound at first because I haven't contributed much since I purchased my initial positions.\nAs I mentioned in my last post, I split my contribution in the brokerage account 60%--40% between US and international stocks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npositions <- selected_prices |>\n  group_by(symbol, account) |>\n  mutate(initial_share_price = first(adjusted)) |>\n  ungroup() |>\n  mutate(\n    weights = case_match(\n      symbol,\n      \"VTI\" ~ 1, # 100% of each baseline comparator is VTI\n      \"ESGU\" ~ .6,\n      \"ESGE\" ~ .4,\n      \"VLXVX\" ~ 1\n    ),\n    initial_investment = if_else(account == \"brokerage\", 1000, 10000),\n    shares = initial_investment * weights / initial_share_price\n  )\n```\n:::\n\n\nFor a point-in-time snapshot of each portfolio, I'll use `treemapify` to make treemaps using `ggplot2` \n\n\n::: {.cell}\n\n```{.r .cell-code}\npositions |>\n  group_by(symbol, account, baseline) |>\n  summarize(value = first(initial_investment * weights)) |>\n  ggplot() +\n  aes(area = value, fill = symbol, label = scales::dollar(value)) +\n  treemapify::geom_treemap() +\n  treemapify::geom_treemap_text(place = \"center\") +\n  facet_grid(rows = vars(account), cols = vars(baseline), scales = \"free\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}