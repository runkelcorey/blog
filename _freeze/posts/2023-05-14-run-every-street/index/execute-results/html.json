{
  "hash": "0e333c8e3cd3dce4eb91d4f162d9a424",
  "result": {
    "markdown": "---\ntitle: \"2023 goal: run every street in Cambridge\"\nauthor: corey\ndate: 2023-05-14\ncategories:\n  - running\n  - projects\n  - r\neditor_options: \n  markdown: \n    wrap: sentence\nexecute: \n  eval: false\ndraft: true\n---\n\n\nSince I stopped running competitively in high school, I use running to explore.\nSurprisingly, much of what I explore are places I've lived for a while.\nWhen I trained for the 2019 Richmond Marathon, I explored Charlottesville, where I had lived for 3 years.\nIn covid, I explored Northern Virginia, where I grew up, and the Outer Banks, where my family has for many years spent a week in the summer.\n\nNew Haven was the first time I had used running to explore somewhere new.\nIt's a small city, so it was feasible to run to the edges and back without going more than 6 or 7 miles.\nNevertheless, running showed me some parts that I never would have seen otherwise: the waterfront, with all its industry and emptiness; Westville, with an underused but large park; and the mansions of St. Ronan Street.\n\nWhen I moved to Camcbridge, the size of the streetscape overwhelmed me.\nI could run 25 miles without leaving a sidewalk, and there was far too much to see by myself.\nCounterintuitively, I needed to limit my scope in order to see new things.\nSo, in January 2023, I set myself a goal to run each street in Cambridge.\nBut, 5 months later, I know haven't done much.\n\nPartly, my lack of progress is due to not knowing what I have and haven't done.\n(Partly, it's laziness.)\nThis is also a great opportunity to pull together several data skills.\nIn this post, I will set up a tool to track my progress.\nThe tool will:\n* display a map of run and un-run streets\n* calculate % and miles of streets run\n* show how much running I could divert to this goal\n* automatically update each day\n\nTherefore, I need spatial data for each run, plus spatial data to identify streets in Cambridge.\nFor each run's path, I'll get my Strava data using `rStrava`.\nFor the streets, I'll use `osmdata`.\nThen, I'll visualize these using `rShiny` and update them using GitHub Actions.\n\n## Get My Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(rStrava)\nlibrary(osmextract)\nlibrary(googlePolylines)\nlibrary(tigris)\nlibrary(ggmap)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\napp_name = \"run-every-street\"\napp_client_id = \"107397\"\napp_secret = \"41c03174e207781ba2664ab81afb9c1f9303120f\"\n\nstoken <- httr::config(token = strava_oauth(app_name, app_client_id, app_secret, app_scope=\"activity:read_all\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nactivities <- get_activity_list(stoken) %>%\ncompile_activities() %>%\nfilter(str_ends(sport_type, \"Run\"), str_ends(timezone, \"New_York\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nactivities <- activities %>%\n.$map.summary_polyline %>%\ndecode() %>% map(function(x) st_linestring(cbind(x$lon, x$lat))) %>% st_sfc() %>% cbind(activities) %>%\nselect(id, start_date_local, distance, elapsed_time, geometry) %>%\nst_as_sf() %>%\nst_set_crs(3857)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbb <- st_bbox(cambridge)\nnames(bb) <- c('left', 'bottom', 'right', 'top')\n\nbb %>%\nget_map(maptype = 'toner-lite', source = 'stamen') %>%\nggmap() +\ngeom_sf(aes(col = 'red'), data = st_set_crs(activities, 3857), inherit.aes = FALSE)\n```\n:::\n\n\n## Get Street Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstreets <- oe_get('us/massachusetts') %>%\nfilter(!is.na(highway)) %>%\nselect(osm_id, name, highway, other_tags, geometry)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncambridge <- places(state = 'MA', year = 2022) %>%\nfilter(NAME == 'Cambridge') %>%\nselect(NAME, geometry)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstreets <- st_read(\"posts/2023-05-14-run-every-street/cambridge_streets.gpkg\") %>%\nst_transform(st_crs(cambridge)) %>%\nst_intersection(cambridge)\n```\n:::\n\n## Calculate\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_buffer(st_transform(activities, st_crs(cambridge)), .0001) %>%\nggplot() +\ngeom_sf()\n```\n:::\n\n\n## Visualize\n\n## Automate\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}